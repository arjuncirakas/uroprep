import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addCase, updateCase, generatePresentation } from '../../store/slices/mdtSlice';
import { 
  FileText, 
  Users, 
  Calendar, 
  Plus,
  Eye,
  Edit,
  CheckCircle,
  AlertTriangle,
  Clock,
  Database,
  BarChart3
} from 'lucide-react';

const MDTCaseManagement = () => {
  const dispatch = useDispatch();
  const { cases, meetings } = useSelector(state => state.mdt);
  const { db1, db2, db3, db4 } = useSelector(state => state.databases);
  
  const [selectedCase, setSelectedCase] = useState(null);
  const [showNewCase, setShowNewCase] = useState(false);
  const [newCase, setNewCase] = useState({
    patientName: '',
    patientId: '',
    priority: 'medium',
    clinicalQuestion: '',
    referringClinician: '',
    caseType: 'complex',
    description: '',
    supportingDocuments: [],
  });

  const caseTypes = [
    { id: 'complex', label: 'Complex Case', description: 'Multi-disciplinary input required' },
    { id: 'borderline', label: 'Borderline Findings', description: 'Unclear management pathway' },
    { id: 'patient_preference', label: 'Patient Preference', description: 'Patient requests MDT discussion' },
    { id: 'progression', label: 'Disease Progression', description: 'Surveillance to treatment transition' },
  ];

  const priorities = [
    { id: 'urgent', label: 'Urgent', color: 'red' },
    { id: 'high', label: 'High', color: 'orange' },
    { id: 'medium', label: 'Medium', color: 'yellow' },
    { id: 'low', label: 'Low', color: 'green' },
  ];

  const handleCreateCase = () => {
    if (!newCase.patientName || !newCase.clinicalQuestion) {
      alert('Please fill in all required fields');
      return;
    }

    const mdtCase = {
      ...newCase,
      id: `MDT${new Date().getFullYear()}${String(cases.length + 1).padStart(4, '0')}`,
      status: 'pending',
      createdAt: new Date().toISOString(),
      assignedMeeting: null,
    };

    dispatch(addCase(mdtCase));
    setNewCase({
      patientName: '',
      patientId: '',
      priority: 'medium',
      clinicalQuestion: '',
      referringClinician: '',
      caseType: 'complex',
      description: '',
      supportingDocuments: [],
    });
    setShowNewCase(false);
  };

  const handleUpdateCase = (caseId, updates) => {
    dispatch(updateCase({ id: caseId, ...updates }));
  };

  const handleGeneratePresentation = (caseId) => {
    dispatch(generatePresentation({
      caseId,
      template: 'standard_mdt_presentation'
    }));
  };

  // Generate automatic case packets from database referrals
  const generateAutomaticCasePackets = () => {
    const db1MDTCases = db1.patients.filter(p => p.clinicalDecision === 'mdt_referral');
    const db2ProgressionCases = db2.patients.filter(p => p.progressionAlert);
    const db3ComplexCases = db3.patients.filter(p => p.mdtDiscussionRequired);
    const db4RecurrenceCases = db4.patients.filter(p => p.biochemicalRecurrence);

    return [
      ...db1MDTCases.map(patient => ({
        id: `AUTO-${patient.id}`,
        patientName: patient.name,
        patientId: patient.id,
        priority: patient.priority || 'medium',
        clinicalQuestion: 'Initial MDT referral from OPD assessment',
        referringClinician: patient.consultant || 'Dr. Urologist',
        caseType: 'complex',
        description: `Automatic case packet generated from DB1 assessment. PSA: ${patient.psa} ng/mL, Gleason: ${patient.gleason || 'Not available'}`,
        status: 'pending',
        source: 'DB1',
        autoGenerated: true
      })),
      ...db2ProgressionCases.map(patient => ({
        id: `AUTO-${patient.id}`,
        patientName: patient.name,
        patientId: patient.id,
        priority: 'high',
        clinicalQuestion: 'Progression detected during active surveillance - MDT discussion required',
        referringClinician: 'Dr. Urologist',
        caseType: 'progression',
        description: `Progression alert: PSA velocity ${patient.psaVelocity} ng/mL/year or new MRI findings`,
        status: 'pending',
        source: 'DB2',
        autoGenerated: true
      }))
    ];
  };

  const automaticCases = generateAutomaticCasePackets();

  const getPriorityColor = (priority) => {
    const priorityObj = priorities.find(p => p.id === priority);
    return priorityObj ? priorityObj.color : 'gray';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'active': return 'bg-blue-100 text-blue-800';
      case 'completed': return 'bg-green-100 text-green-800';
      case 'cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const renderCaseDetails = (case_) => (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Case #{case_.id}</h3>
          <p className="text-sm text-gray-600">Patient: {case_.patientName}</p>
        </div>
        <div className="flex items-center space-x-2">
          <span className={`px-2 py-1 text-xs font-medium rounded-full bg-${getPriorityColor(case_.priority)}-100 text-${getPriorityColor(case_.priority)}-800`}>
            {case_.priority}
          </span>
          <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(case_.status)}`}>
            {case_.status}
          </span>
        </div>
      </div>

      <div className="space-y-4">
        <div>
          <h4 className="font-medium text-gray-900 mb-2">Clinical Question</h4>
            <p className="text-sm text-gray-600">{case_.clinicalQuestion}</p>
        </div>

        <div>
          <h4 className="font-medium text-gray-900 mb-2">Case Type</h4>
          <p className="text-sm text-gray-600">
            {caseTypes.find(t => t.id === case_.caseType)?.label} - 
            {caseTypes.find(t => t.id === case_.caseType)?.description}
          </p>
        </div>

        <div>
          <h4 className="font-medium text-gray-900 mb-2">Referring Clinician</h4>
          <p className="text-sm text-gray-600">{case_.referringClinician}</p>
        </div>

        <div>
          <h4 className="font-medium text-gray-900 mb-2">Description</h4>
          <p className="text-sm text-gray-600">{case_.description}</p>
        </div>

        <div>
          <h4 className="font-medium text-gray-900 mb-2">Supporting Documents</h4>
          {case_.supportingDocuments && case_.supportingDocuments.length > 0 ? (
            <div className="space-y-2">
              {case_.supportingDocuments.map((doc, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <FileText className="h-4 w-4 text-gray-400" />
                  <span className="text-sm text-gray-600">{doc}</span>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-gray-500">No supporting documents</p>
          )}
        </div>

        <div className="flex justify-end space-x-3">
          <button
            onClick={() => handleGeneratePresentation(case_.id)}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Generate Presentation
          </button>
          <button
            onClick={() => handleUpdateCase(case_.id, { status: 'active' })}
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            Activate Case
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">MDT Case Management</h1>
          <p className="text-gray-600">Manage multidisciplinary team cases and presentations</p>
        </div>
        <button
          onClick={() => setShowNewCase(true)}
          className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 flex items-center"
        >
          <Plus className="h-4 w-4 mr-2" />
          Add New Case
        </button>
      </div>

      {/* Automatic Case Packets */}
      {automaticCases.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-blue-900">Automatic Case Packets</h3>
            <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
              {automaticCases.length} Auto-Generated
            </span>
          </div>
          <div className="space-y-3">
            {automaticCases.slice(0, 3).map((case_) => (
              <div key={case_.id} className="bg-white border border-blue-200 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">{case_.patientName}</h4>
                    <p className="text-sm text-gray-600">{case_.clinicalQuestion}</p>
                    <p className="text-xs text-blue-600">Source: {case_.source} â€¢ Auto-generated</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                      {case_.priority}
                    </span>
                    <button
                      onClick={() => {
                        dispatch(addCase({
                          ...case_,
                          id: case_.id.replace('AUTO-', ''),
                          autoGenerated: false
                        }));
                      }}
                      className="px-3 py-1 bg-blue-600 text-white rounded text-xs font-medium hover:bg-blue-700"
                    >
                      Accept Case
                    </button>
                  </div>
                </div>
              </div>
            ))}
            {automaticCases.length > 3 && (
              <p className="text-sm text-blue-600 text-center">
                +{automaticCases.length - 3} more automatic cases
              </p>
            )}
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Cases List */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-sm border">
            <div className="p-4 border-b">
              <h3 className="text-lg font-semibold text-gray-900">MDT Cases</h3>
            </div>
            <div className="max-h-96 overflow-y-auto">
              {cases.length === 0 ? (
                <div className="p-4 text-center text-gray-500">
                  <FileText className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                  <p>No MDT cases</p>
                </div>
              ) : (
                cases.map((case_) => (
                  <div
                    key={case_.id}
                    className={`p-4 border-b cursor-pointer hover:bg-gray-50 ${
                      selectedCase?.id === case_.id ? 'bg-purple-50 border-purple-200' : ''
                    }`}
                    onClick={() => setSelectedCase(case_)}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium text-gray-900">Case #{case_.id}</h4>
                        <p className="text-sm text-gray-600">{case_.patientName}</p>
                        <p className="text-xs text-gray-500">{case_.clinicalQuestion}</p>
                      </div>
                      <div className="text-right">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full bg-${getPriorityColor(case_.priority)}-100 text-${getPriorityColor(case_.priority)}-800`}>
                          {case_.priority}
                        </span>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* Case Details */}
        <div className="lg:col-span-2">
          {selectedCase ? (
            renderCaseDetails(selectedCase)
          ) : (
            <div className="bg-white rounded-lg shadow-sm border p-12 text-center">
              <FileText className="h-16 w-16 mx-auto mb-4 text-gray-300" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Select a Case</h3>
              <p className="text-gray-600">Choose a case from the list to view details and manage</p>
            </div>
          )}
        </div>
      </div>

      {/* New Case Modal */}
      {showNewCase && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b">
              <h3 className="text-lg font-semibold text-gray-900">Add New MDT Case</h3>
            </div>
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Patient Name *
                  </label>
                  <input
                    type="text"
                    value={newCase.patientName}
                    onChange={(e) => setNewCase(prev => ({ ...prev, patientName: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    placeholder="John Smith"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Patient ID
                  </label>
                  <input
                    type="text"
                    value={newCase.patientId}
                    onChange={(e) => setNewCase(prev => ({ ...prev, patientId: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    placeholder="UPI or MRN"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Priority
                  </label>
                  <select
                    value={newCase.priority}
                    onChange={(e) => setNewCase(prev => ({ ...prev, priority: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  >
                    {priorities.map((priority) => (
                      <option key={priority.id} value={priority.id}>{priority.label}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Case Type
                  </label>
                  <select
                    value={newCase.caseType}
                    onChange={(e) => setNewCase(prev => ({ ...prev, caseType: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  >
                    {caseTypes.map((type) => (
                      <option key={type.id} value={type.id}>{type.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Clinical Question *
                </label>
                <textarea
                  value={newCase.clinicalQuestion}
                  onChange={(e) => setNewCase(prev => ({ ...prev, clinicalQuestion: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  rows="3"
                  placeholder="What is the specific clinical question for MDT discussion?"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Referring Clinician
                </label>
                <input
                  type="text"
                  value={newCase.referringClinician}
                  onChange={(e) => setNewCase(prev => ({ ...prev, referringClinician: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="Dr. John Smith"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Case Description
                </label>
                <textarea
                  value={newCase.description}
                  onChange={(e) => setNewCase(prev => ({ ...prev, description: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  rows="4"
                  placeholder="Provide detailed case description, clinical history, and relevant findings..."
                />
              </div>
            </div>
            <div className="p-6 border-t flex justify-end space-x-3">
              <button
                onClick={() => setShowNewCase(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateCase}
                className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
              >
                Create Case
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Case Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex items-center">
            <FileText className="h-8 w-8 text-blue-600 mr-3" />
            <div>
              <p className="text-sm font-medium text-gray-600">Total Cases</p>
              <p className="text-2xl font-bold text-gray-900">{cases.length}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex items-center">
            <Clock className="h-8 w-8 text-yellow-600 mr-3" />
            <div>
              <p className="text-sm font-medium text-gray-600">Pending</p>
              <p className="text-2xl font-bold text-gray-900">
                {cases.filter(c => c.status === 'pending').length}
              </p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex items-center">
            <CheckCircle className="h-8 w-8 text-green-600 mr-3" />
            <div>
              <p className="text-sm font-medium text-gray-600">Completed</p>
              <p className="text-2xl font-bold text-gray-900">
                {cases.filter(c => c.status === 'completed').length}
              </p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex items-center">
            <AlertTriangle className="h-8 w-8 text-red-600 mr-3" />
            <div>
              <p className="text-sm font-medium text-gray-600">Urgent</p>
              <p className="text-2xl font-bold text-gray-900">
                {cases.filter(c => c.priority === 'urgent').length}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MDTCaseManagement;
